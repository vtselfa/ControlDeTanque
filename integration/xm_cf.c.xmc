/* File generated by xmcparser. Don't modify. */

#include <xm_inc/xmconf.h>

extern char _xmcSize[];

const struct xmcPartition xmcPartitionTab[] = {
    [0] = {
        .id = 0,
        .nameOffset = 12,
        .flags = 0x300,
        .loadPhysAddr = 0x400000,
        .headerOffset = 0x0,
        .imageId = 0x0,
        .consoleDev = { .id= 0x3, .subId = 0x0,},
        .temporalRestrictions = {.period = 500000, .duration = 500000},
        .noPhysicalMemoryAreas = 6,
        .physicalMemoryAreasOffset = 1,
        .hmTab = {
            [0] = {.action = XM_HM_AC_WARM_RESET, .log = XM_HM_LOG_ENABLED, },
            [1] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [2] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [3] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [4] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [5] = {.action = XM_HM_AC_SUSPEND, .log = XM_HM_LOG_ENABLED, },
            [6] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [7] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [8] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [9] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
        },
        .noPorts = 6,
        .commPortsOffset = 0,
        .ioPortsOffset = 0,
        .noIoPorts = 5,
        .trace = {.dev = { .id= 0xffff, .subId = 0x0, }, .bitmap = 0x0,},
    },
    [1] = {
        .id = 1,
        .nameOffset = 59,
        .flags = 0x300,
        .loadPhysAddr = 0x10400000,
        .headerOffset = 0x0,
        .imageId = 0x1,
        .consoleDev = { .id= 0x3, .subId = 0x0,},
        .temporalRestrictions = {.period = 500000, .duration = 500000},
        .noPhysicalMemoryAreas = 1,
        .physicalMemoryAreasOffset = 7,
        .hmTab = {
            [0] = {.action = XM_HM_AC_WARM_RESET, .log = XM_HM_LOG_ENABLED, },
            [1] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [2] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [3] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [4] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [5] = {.action = XM_HM_AC_SUSPEND, .log = XM_HM_LOG_ENABLED, },
            [6] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [7] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [8] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [9] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
        },
        .noPorts = 4,
        .commPortsOffset = 6,
        .ioPortsOffset = 0,
        .noIoPorts = 0,
        .trace = {.dev = { .id= 0xffff, .subId = 0x0, }, .bitmap = 0x0,},
    },
    [2] = {
        .id = 2,
        .nameOffset = 96,
        .flags = 0x300,
        .loadPhysAddr = 0x10500000,
        .headerOffset = 0x0,
        .imageId = 0x2,
        .consoleDev = { .id= 0x3, .subId = 0x0,},
        .temporalRestrictions = {.period = 500000, .duration = 500000},
        .noPhysicalMemoryAreas = 1,
        .physicalMemoryAreasOffset = 8,
        .hmTab = {
            [0] = {.action = XM_HM_AC_WARM_RESET, .log = XM_HM_LOG_ENABLED, },
            [1] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [2] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [3] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [4] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [5] = {.action = XM_HM_AC_SUSPEND, .log = XM_HM_LOG_ENABLED, },
            [6] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [7] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [8] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [9] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
        },
        .noPorts = 4,
        .commPortsOffset = 10,
        .ioPortsOffset = 0,
        .noIoPorts = 0,
        .trace = {.dev = { .id= 0xffff, .subId = 0x0, }, .bitmap = 0x0,},
    },
    [3] = {
        .id = 3,
        .nameOffset = 133,
        .flags = 0x300,
        .loadPhysAddr = 0x10600000,
        .headerOffset = 0x0,
        .imageId = 0x3,
        .consoleDev = { .id= 0x3, .subId = 0x0,},
        .temporalRestrictions = {.period = 500000, .duration = 500000},
        .noPhysicalMemoryAreas = 1,
        .physicalMemoryAreasOffset = 9,
        .hmTab = {
            [0] = {.action = XM_HM_AC_WARM_RESET, .log = XM_HM_LOG_ENABLED, },
            [1] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [2] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [3] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [4] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [5] = {.action = XM_HM_AC_SUSPEND, .log = XM_HM_LOG_ENABLED, },
            [6] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [7] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
            [8] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED, },
            [9] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED, },
        },
        .noPorts = 6,
        .commPortsOffset = 14,
        .ioPortsOffset = 0,
        .noIoPorts = 0,
        .trace = {.dev = { .id= 0xffff, .subId = 0x0, }, .bitmap = 0x0,},
    },
};

const struct xmcMemoryRegion xmcMemRegTab[] = {
    [0] = {
        .startAddr = 0x0, 
        .size = 655360, 
        .flags = 0x1, 
    },
    [1] = {
        .startAddr = 0xa0000, 
        .size = 393216, 
        .flags = 0x0, 
    },
    [2] = {
        .startAddr = 0x100000, 
        .size = 535822336, 
        .flags = 0x1, 
    },
    [3] = {
        .startAddr = 0x3ffff000, 
        .size = 4096, 
        .flags = 0x0, 
    },
    [4] = {
        .startAddr = 0xd0000000, 
        .size = 805306368, 
        .flags = 0x0, 
    },
};

const struct xmcMemoryArea xmcPhysMemAreaTab[] = {
    [0] = {
        .startAddr = 0x100000, .size = 3145728, .flags = 0x0, .memoryRegionOffset = 0x2,
    },
    [1] = {
        .startAddr = 0x400000, .size = 268435456, .flags = 0x6, .memoryRegionOffset = 0x2,
    },
    [2] = {
        .startAddr = 0x3ffff000, .size = 4096, .flags = 0x9, .memoryRegionOffset = 0x3,
    },
    [3] = {
        .startAddr = 0xd0000000, .size = 805306368, .flags = 0xe, .memoryRegionOffset = 0x4,
    },
    [4] = {
        .startAddr = 0x0, .size = 4096, .flags = 0xf, .memoryRegionOffset = 0x0,
    },
    [5] = {
        .startAddr = 0x1000, .size = 651264, .flags = 0x7, .memoryRegionOffset = 0x0,
    },
    [6] = {
        .startAddr = 0xa0000, .size = 393216, .flags = 0xf, .memoryRegionOffset = 0x1,
    },
    [7] = {
        .startAddr = 0x10400000, .size = 1048576, .flags = 0x6, .memoryRegionOffset = 0x2,
    },
    [8] = {
        .startAddr = 0x10500000, .size = 1048576, .flags = 0x6, .memoryRegionOffset = 0x2,
    },
    [9] = {
        .startAddr = 0x10600000, .size = 1048576, .flags = 0x6, .memoryRegionOffset = 0x2,
    },
};

const struct xmcSchedCyclicSlot xmcSchedCyclicSlotTab[] = {
    [0] = {
        .id = 0x0,
        .partitionId = 0,
        .sExec = 0,
        .eExec = 96000,
    },
    [1] = {
        .id = 0x1,
        .partitionId = 1,
        .sExec = 96000,
        .eExec = 97000,
    },
    [2] = {
        .id = 0x2,
        .partitionId = 2,
        .sExec = 97000,
        .eExec = 98000,
    },
    [3] = {
        .id = 0x3,
        .partitionId = 3,
        .sExec = 98000,
        .eExec = 99000,
    },
};

const struct xmcSchedCyclicPlan xmcSchedCyclicPlanTab[] = {
    [0] = {
        .id = 0x0,
        .majorFrame = 100000,
        .noSlots = 4,
        .slotsOffset = 0,
    },
};

const struct xmcCommChannel xmcCommChannelTab[] = {
    [0] = {
        .type = XM_SAMPLING_CHANNEL,
        {.s.maxLength = 16, },
        .validPeriod = 0,
    },
    [1] = {
        .type = XM_SAMPLING_CHANNEL,
        {.s.maxLength = 16, },
        .validPeriod = 0,
    },
    [2] = {
        .type = XM_SAMPLING_CHANNEL,
        {.s.maxLength = 16, },
        .validPeriod = 0,
    },
    [3] = {
        .type = XM_SAMPLING_CHANNEL,
        {.s.maxLength = 16, },
        .validPeriod = 0,
    },
    [4] = {
        .type = XM_SAMPLING_CHANNEL,
        {.s.maxLength = 16, },
        .validPeriod = 0,
    },
    [5] = {
        .type = XM_SAMPLING_CHANNEL,
        {.s.maxLength = 16, },
        .validPeriod = 0,
    },
    [6] = {
        .type = XM_SAMPLING_CHANNEL,
        {.s.maxLength = 16, },
        .validPeriod = 0,
    },
    [7] = {
        .type = XM_SAMPLING_CHANNEL,
        {.s.maxLength = 16, },
        .validPeriod = 0,
    },
    [8] = {
        .type = XM_SAMPLING_CHANNEL,
        {.s.maxLength = 16, },
        .validPeriod = 0,
    },
    [9] = {
        .type = XM_SAMPLING_CHANNEL,
        {.s.maxLength = 16, },
        .validPeriod = 0,
    },
};

const struct xmcCommPort xmcCommPorts[] = {
    [0] = {
        .nameOffset = 23,
        .channelId = 0, 
        .direction = XM_DESTINATION_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [1] = {
        .nameOffset = 30,
        .channelId = 4, 
        .direction = XM_DESTINATION_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [2] = {
        .nameOffset = 37,
        .channelId = 3, 
        .direction = XM_DESTINATION_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [3] = {
        .nameOffset = 44,
        .channelId = 7, 
        .direction = XM_SOURCE_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [4] = {
        .nameOffset = 49,
        .channelId = 8, 
        .direction = XM_SOURCE_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [5] = {
        .nameOffset = 54,
        .channelId = 9, 
        .direction = XM_SOURCE_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [6] = {
        .nameOffset = 70,
        .channelId = 1, 
        .direction = XM_DESTINATION_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [7] = {
        .nameOffset = 77,
        .channelId = 4, 
        .direction = XM_SOURCE_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [8] = {
        .nameOffset = 84,
        .channelId = 6, 
        .direction = XM_SOURCE_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [9] = {
        .nameOffset = 91,
        .channelId = 7, 
        .direction = XM_DESTINATION_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [10] = {
        .nameOffset = 107,
        .channelId = 2, 
        .direction = XM_DESTINATION_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [11] = {
        .nameOffset = 114,
        .channelId = 3, 
        .direction = XM_SOURCE_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [12] = {
        .nameOffset = 121,
        .channelId = 5, 
        .direction = XM_SOURCE_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [13] = {
        .nameOffset = 128,
        .channelId = 8, 
        .direction = XM_DESTINATION_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [14] = {
        .nameOffset = 144,
        .channelId = 0, 
        .direction = XM_SOURCE_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [15] = {
        .nameOffset = 151,
        .channelId = 1, 
        .direction = XM_SOURCE_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [16] = {
        .nameOffset = 158,
        .channelId = 2, 
        .direction = XM_SOURCE_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [17] = {
        .nameOffset = 165,
        .channelId = 6, 
        .direction = XM_DESTINATION_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [18] = {
        .nameOffset = 172,
        .channelId = 5, 
        .direction = XM_DESTINATION_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
    [19] = {
        .nameOffset = 179,
        .channelId = 9, 
        .direction = XM_DESTINATION_PORT, 
        .type = XM_SAMPLING_PORT, 
    },
};

const struct xmcIoPort xmcIoPortTab[] = {
    [0] = { .map = {
        [0] = 0xfe000000,
        [1] = 0x3,
        [2] = 0xf,
        [3] = 0xc0000000,
        [4] = 0xffffffff,
        [5] = 0x3,
        [6 ... 30] = 0x0,
        [31] = 0x1f000000,
        [32 ... 2046] = 0x0,
        [2047] = 0xff000000,
    }, },
};

char xmcStringTab[] = {
    0x68,     0x65,     0x6c,     0x6c,     0x6f,     0x5f,     0x77,     0x6f,     0x72,     0x6c,     0x64,     0x0,     0x50,     0x61,     0x72,     0x74,     0x69,     0x74,     0x69,     0x6f,     0x6e,     0x31,     0x0,     0x73,     0x69,     0x6d,     0x5f,     0x72,     0x30,     0x0,     0x70,     0x76,     0x73,     0x5f,     0x72,     0x30,     0x0,     0x70,     0x76,     0x63,     0x5f,     0x72,     0x30,     0x0,     0x65,     0x31,     0x5f,     0x77,     0x0,     0x65,     0x32,     0x5f,     0x77,     0x0,     0x65,     0x33,     0x5f,     0x77,     0x0,     0x50,     0x61,     0x72,     0x74,     0x69,     0x74,     0x69,     0x6f,     0x6e,     0x32,     0x0,     0x73,     0x69,     0x6d,     0x5f,     0x72,     0x31,     0x0,     0x70,     0x76,     0x73,     0x5f,     0x77,     0x30,     0x0,     0x70,     0x76,     0x73,     0x5f,     0x77,     0x33,     0x0,     0x65,     0x31,     0x5f,     0x72,     0x0,     0x50,     0x61,     0x72,     0x74,     0x69,     0x74,     0x69,     0x6f,     0x6e,     0x33,     0x0,     0x73,     0x69,     0x6d,     0x5f,     0x72,     0x32,     0x0,     0x70,     0x76,     0x63,     0x5f,     0x77,     0x30,     0x0,     0x70,     0x76,     0x63,     0x5f,     0x77,     0x33,     0x0,     0x65,     0x32,     0x5f,     0x72,     0x0,     0x50,     0x61,     0x72,     0x74,     0x69,     0x74,     0x69,     0x6f,     0x6e,     0x34,     0x0,     0x73,     0x69,     0x6d,     0x5f,     0x77,     0x30,     0x0,     0x73,     0x69,     0x6d,     0x5f,     0x77,     0x31,     0x0,     0x73,     0x69,     0x6d,     0x5f,     0x77,     0x32,     0x0,     0x70,     0x76,     0x73,     0x5f,     0x72,     0x33,     0x0,     0x70,     0x76,     0x63,     0x5f,     0x72,     0x33,     0x0,     0x65,     0x33,     0x5f,     0x72,     0x0, };

struct xmcMemBlock xmcMemBlockTab[]={
};

const struct xmc xmc __attribute__ ((section(".rodata.hdr"))) = {
    .signature = XMC_SIGNATURE,
    .size = (xmSize_t)_xmcSize,
    .version = XMC_SET_VERSION(2, 0, 0),
    .fileVersion = XMC_SET_VERSION(1, 0, 0),
    .checksum = 0x0,
    .nameOffset = 0,
    .hpv = {
        .noPhysicalMemoryAreas = 1,
        .physicalMemoryAreasOffset = 0,
        .noCpus = 1,
        .cpuTab = {
            [0] = {
                .id = 0,
                .features = 0x0,
                .freq = XM_CPUFREQ_AUTO,
                .schedPolicy = XM_SCHED_CYCLIC, 
                .schedParams = {
                    .cyclic = {
                        .schedCyclicPlansOffset = 0,
                        .noSchedCyclicPlans = 1,
                    },
                },
            },
        },
        .hwIrqTab = {
            [0] = {.owner = XM_IRQ_NO_OWNER, },
            [1] = {.owner = 0, },
            [2] = {.owner = 0, },
            [3] = {.owner = 0, },
            [4] = {.owner = XM_IRQ_NO_OWNER, },
            [5] = {.owner = 0, },
            [6] = {.owner = 0, },
            [7] = {.owner = 0, },
            [8] = {.owner = 0, },
            [9] = {.owner = 0, },
            [10] = {.owner = 0, },
            [11] = {.owner = 0, },
            [12] = {.owner = 0, },
            [13] = {.owner = 0, },
            [14] = {.owner = 0, },
            [15] = {.owner = 0, },
        },
        .hmTab = {
            [0] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED },
            [1] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED },
            [2] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED },
            [3] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED },
            [4] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED },
            [5] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED },
            [6] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED },
            [7] = {.action = XM_HM_AC_IGNORE, .log = XM_HM_LOG_ENABLED },
            [8] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED },
            [9] = {.action = XM_HM_AC_HALT, .log = XM_HM_LOG_ENABLED },
        },
        .trace = {.dev = { .id = 0xffff, .subId = 0x0,}, .bitmap = 0x0,},
        .consoleDev = { .id= 0x3, .subId = 0x0,},
        .hmDev = { .id= 0xffff, .subId = 0x0,},
        .loadPhysAddr = 0x100000,
    },
    .rsw = {
        .entryPoint = 0x0,
        .noPhysicalMemoryAreas = 0,
        .physicalMemoryAreasOffset = 0
    },
    .partitionTabOffset = (xmAddress_t)xmcPartitionTab,
    .noPartitions = 4,
    .memoryRegionsOffset = (xmAddress_t)xmcMemRegTab,
    .noRegions = 5,
    .physicalMemoryAreasOffset = (xmAddress_t)xmcPhysMemAreaTab,
    .noPhysicalMemoryAreas = 10,
    .schedCyclicSlotsOffset = (xmAddress_t)xmcSchedCyclicSlotTab,
    .noSchedCyclicSlots = 4,
    .schedCyclicPlansOffset = (xmAddress_t)xmcSchedCyclicPlanTab,
    .noSchedCyclicPlans = 1,
    .commChannelTabOffset = (xmAddress_t)xmcCommChannelTab,
    .noCommChannels = 10,
    .commPortsOffset = (xmAddress_t)xmcCommPorts,
    .noCommPorts = 20,
    .ioPortsOffset = (xmAddress_t)xmcIoPortTab,
    .noIoPorts = 1,
    .stringsOffset = (xmAddress_t)xmcStringTab,
    .stringTabLength = 184,
    .deviceTab = {
        .memBlocksOffset = (xmAddress_t)xmcMemBlockTab,
        .noMemBlocks = 0,
        .pcUart = {},
        .pcVga = {},
    },
};
